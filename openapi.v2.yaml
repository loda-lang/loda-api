openapi: 3.0.3
info:
  title: LODA API v2
  version: "2.0.0"
  description: |
    API for managing, evaluating and submitting LODA programs and integer sequences.
servers:
- url: https://api.loda-lang.org/v2
tags:
- name: Programs
  description: Endpoints related to LODA programs
- name: Sequences
  description: Endpoints related to integer sequences
- name: Stats
  description: Endpoints related to statistics
paths:
  /sequences/{id}:
    get:
      tags: [ Sequences ]
      summary: Get integer sequence details
      description: Retrieve detailed information about an integer sequence, including its terms, references, links, and keywords. Integer sequences with an ID starting with 'A' are from the OEIS.
      parameters:
      - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: Sequence details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SequenceDetails'
        '404':
          description: Sequence not found
  /sequences/search:
    get:
      tags: [ Sequences ]
      summary: Search integer sequences
      description: Search for integer sequences by name, ID, keywords and other criteria. Supports pagination.
      parameters:
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Skip'
      responses:
        '200':
          description: List of matching integer sequences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
  /programs/{id}:
    get:
      tags: [ Programs ]
      summary: Get LODA program details
      description: Retrieve detailed information about a LODA program for an integer sequence, including its author and code. The IDs of LODA programs match the IDs of the integer sequences that they compute. In particular, LODA programs for OEIS sequences have IDs starting with 'A'.
      parameters:
      - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: LODA program details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProgramDetails'
        '404':
          description: Program not found
  /programs/search:
    get:
      tags: [ Programs ]
      summary: Search LODA programs
      description: |
        Search for LODA programs using flexible criteria. Supports pagination.
      
        Supported search criteria:
        - **Name**: Matches tokens in the program name (case-insensitive).
        - **ID**: Matches tokens in the program ID (e.g., A000045).
        - **Keywords**: Include keywords by specifying them in the query (e.g., `core easy`). Exclude keywords by prefixing with a minus sign (e.g., `-hard`).
        - **Submitter**: Matches tokens in the submitter's name (case-insensitive).
        - **Advanced**: All tokens in the query must be present in either the program name or submitter name. Keywords are handled as described above.
      
        Example queries:
        - `Fibonacci core` (programs with "Fibonacci" in the name and the "core" keyword)
        - `Alice` (programs submitted by Alice)
        - `-hard` (exclude programs with the "hard" keyword)
        - `A000045` (program with ID A000045)
      parameters:
      - $ref: '#/components/parameters/Query'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/Skip'
      responses:
        '200':
          description: List of matching LODA programs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
  /programs/eval:
    post:
      tags: [ Programs, Sequences ]
      summary: Evaluate a LODA program
      description: |
        Evaluate a LODA program to generate the corresponding integer sequence. The request body should contain the program code in plain text format. An integer sequence a(n) is generated by subsequently evaluating the program with inputs n=0,1,2,... up to the specified number of terms. If an offset is provided, the evaluation starts from n=offset instead of n=0.
        
        The response always includes:
        - `status`: "success" or "error"
        - `message`: error message if any, or empty string
        - `terms`: array of computed terms (may be partial if error)
      parameters:
      - $ref: '#/components/parameters/EvalNumTerms'
      - $ref: '#/components/parameters/EvalOffset'
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: LODA program code
            example: |
              mov $1,2
              pow $1,$0
              mov $0,$1
              add $0,1
      responses:
        '200':
          description: Evaluation result including computed status, message and computed terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Bad request, invalid program format
  /programs/{id}/submit:
    post:
      tags: [ Programs ]
      summary: Submit a new LODA program
      parameters:
      - $ref: '#/components/parameters/ID'
      - $ref: '#/components/parameters/Submitter'
      description: Submit a LODA program in plain text format. The request body should contain the program code as text/plain. The response is a Result object, similar to the /programs/eval endpoint.
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: LODA program code
            example: |
              mov $2,1
              lpb $0
                sub $0,2
                add $2,$1
                add $1,$2
              lpe
              mul $0,$2
              add $0,$1
      responses:
        '200':
          description: Submission result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
        '400':
          description: Bad request, invalid program format
  /stats/summary:
    get:
      tags: [ Stats ]
      summary: Get statistics summary
      description: Returns a summary of the number of sequences, programs, and formulas in the database.
      responses:
        '200':
          description: Statistics summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsSummary'
  /stats/keywords:
    get:
      tags: [ Stats ]
      summary: List all keywords
      description: Returns a list of all keywords with their descriptions.
      responses:
        '200':
          description: List of keywords
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Keyword'
  /stats/submitters:
    get:
      tags: [ Stats ]
      summary: List all submitters
      description: Returns a list of all submitters with their number of submitted programs.
      responses:
        '200':
          description: List of submitters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submitter'
  /stats/programs/numUsages:
    get:
      tags: [ Stats ]
      summary: List number of usages for each program
      description: Returns a list of objects with program ID and number of usages (number of other programs that call it using `seq`).
      responses:
        '200':
          description: List of program usages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProgramUsages'

components:
  parameters:
    ID:
      name: id
      in: path
      required: true
      description: ID of an integer sequence or a LODA program (e.g. A000045)
      example: A000045
      schema:
        type: string
        pattern: '^[A-Z]\d{1,10}$'
    Query:
      name: q
      in: query
      required: true
      description: |
        Search query supporting keywords, properties, submitters and advanced criteria.
        You can specify keywords to include or exclude in the search results.
        To require a keyword, simply include it in the query. To exclude a keyword, prefix it with a minus sign (e.g., `-keyword`).
      example: Fibonacci numbers
      schema:
        type: string
    EvalNumTerms:
      name: t
      in: query
      required: false
      description: Number of terms to compute for evaluation requests
      schema:
        type: integer
        minimum: 1
        maximum: 10000
        default: 8
    EvalOffset:
      name: o
      in: query
      required: false
      description: |
        The starting index (offset) for evaluating the sequence program.
        Integer sequences are typically defined starting from n = 0,
        but some sequences may start from a different index (e.g., n = 1 or n = 2).
        If set, this parameter overrides the `#offset` directive at the top 
        of the program, or the default of 0 if not specified in the program. 
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      required: false
      description: Maximum number of results to return (pagination limit)
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    Skip:
      name: skip
      in: query
      required: false
      description: Number of items to skip before starting to collect the result set (pagination offset)
      schema:
        type: integer
        minimum: 0
        default: 0
    Submitter:
      name: submitter
      in: query
      required: false
      description: User who submitted the program
      example: Alice
      schema:
        type: string
  schemas:
    SearchItem:
      type: object
      properties:
        id:
          type: string
          pattern: '^[A-Z]\d{1,10}$'
          description: ID of the integer sequence or LODA program
          example: A000045
        name:
          type: string
          description: Name of the integer sequence or LODA program
          example: Fibonacci numbers
        keywords:
          type: array
          description: Keywords for this item
          example: [ core, easy, loda, loda-logeval, nice, nonn ]
          items:
            type: string
    SearchResult:
      type: object
      properties:
        total:
          type: integer
          description: Total number of matching items
        results:
          type: array
          items:
            $ref: '#/components/schemas/SearchItem'
    Terms:
      type: array
      items:
        type: string
        pattern: '^-?\d+$'
        description: Sequence term encoded as a string to support arbitrary-sized integers
    SequenceDetails:
      allOf:
      - $ref: '#/components/schemas/SearchItem'
      - type: object
        properties:
          terms:
            $ref: '#/components/schemas/Terms'
          keywords:
            type: array
            description: Keywords for this sequence
            items:
              type: string
          oeisRef:
            type: string
            description: Reference to the OEIS entry (if applicable)
            example: https://oeis.org/A000045
            nullable: true
    ProgramDetails:
      allOf:
      - $ref: '#/components/schemas/SearchItem'
      - type: object
        properties:
          code:
            type: string
            description: LODA program code in plain text format
          submitter:
            type: string
            description: Name of the submitter of the program
            nullable: true
          keywords:
            type: array
            description: Keywords for this program
            items:
              type: string
          operations:
            type: array
            description: Operations of the LODA program as an array of strings
            items:
              type: string
          formula:
            type: string
            description: Formula representing the sequence and generated from the LODA program
            nullable: true
          usages:
            type: array
            items:
              type: string
            description: List of program IDs that use this program by calling it using `seq`
    ProgramUsages:
      type: object
      properties:
        id:
          type: string
          description: Program ID
          example: A000045
        numUsages:
          type: integer
          description: Number of other programs that use this program by calling it using `seq`
    Result:
      type: object
      properties:
        status:
          type: string
          enum: [ success, error ]
          description: Status of the evaluation
        message:
          type: string
          description: Detailed status message
        terms:
          $ref: '#/components/schemas/Terms'
    Keyword:
      type: object
      properties:
        name:
          type: string
          description: Name of the keyword
        description:
          type: string
          description: Description of the keyword
        numPrograms:
          type: integer
          description: Number of programs associated with this keyword
        numSequences:
          type: integer
          description: Number of sequences associated with this keyword
    Submitter:
      type: object
      properties:
        name:
          type: string
          description: Name of the submitter
        numPrograms:
          type: integer
          description: Number of programs submitted by this user
    StatsSummary:
      type: object
      properties:
        numSequences:
          type: integer
          description: Number of integer sequences
        numPrograms:
          type: integer
          description: Number of LODA programs
        numFormulas:
          type: integer
          description: Number of formulas
